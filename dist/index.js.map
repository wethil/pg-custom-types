{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;kBAMwB,KAAK;;;;;;;;;;;;AAH7B,IAAM,IAAI,GAAG,EAAE,CAAC;AAChB,IAAM,KAAK,GAAG,EAAE,CAAC;;AAEF,SAAS,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE;AACjE,MAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AACnB,WAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;GACxC;;AAED,MAAI,GAAG,GAAG,gEAAgE,CAAC;AAC3E,KAAG,GAAG,wBAAS,GAAG,EAAE,KAAK,CAAC,CAAC;;AAE3B,SAAO,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AAC1B,QAAI,GAAG,EAAE;AACP,aAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;KACtB;;AAED,QAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;AACrB,SAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;;;;;;;AAEtB,2BAAgB,IAAI,8HAAE;YAAb,GAAG;;AACV,YAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AACrC,aAAK,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC;OACvC;;;;;;;;;;;;;;;;AAED,YAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;GACjC,CAAC,CAAC;CACJ;;AAED,KAAK,CAAC,OAAO,GAAG,UAAU,EAAE,EAAE,UAAU,EAAE;AACxC,SAAO,UAAC,GAAG,EAAE,QAAQ,EAAK;AACxB,MAAE,CAAC,OAAO,CAAC,UAAU,EAAE,UAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAK;AAC5C,UAAI,GAAG,EAAE;AACP,eAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;OACtB;;AAED,YAAM,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,MAAM,EAAK;AACvC,YAAI,EAAE,CAAC;;AAEP,YAAI,GAAG,EAAE;AACP,iBAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;SACtB;;AAED,gBAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;OAC7B,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC;CACH,CAAC;;AAEF,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;AACpB,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;;AAElB,KAAK,CAAC,SAAS,GAAG,UAAU,MAAM,EAAE;AAClC,SAAO,UAAU,KAAK,EAAE;AACtB,QAAI,KAAK,IAAI,IAAI,EAAE;AACjB,aAAO,IAAI,CAAC;KACb;AACD,WAAO,MAAM,CAAC,KAAK,CAAC,CAAC;GACtB,CAAC;CACH,CAAC;;AAEF,KAAK,CAAC,WAAW,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE;AACtC,SAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;CACzB,CAAC;;AAEF,KAAK,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE,GAAG,EAAE;AACtC,SAAO,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;CACxB,CAAC;;AAEF,KAAK,CAAC,UAAU,GAAG,UAAU,MAAM,EAAE;AACnC,SAAO,KAAK,CAAC,SAAS,CAAC,UAAC,KAAK;WAAK,wBAAM,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;GAAA,CAAC,CAAC;CAChF,CAAC","file":"index.js","sourcesContent":["import pgformat from 'pg-format';\nimport array from 'postgres-array';\n\nconst OIDS = {};\nconst NAMES = {};\n\nexport default function fetch(execute, uniqueKey, types, callback) {\n  if (OIDS[uniqueKey]) {\n    return callback(null, OIDS[uniqueKey]);\n  }\n\n  let sql = 'SELECT oid, typname AS name FROM pg_type WHERE typname IN (%L)';\n  sql = pgformat(sql, types);\n\n  execute(sql, (err, rows) => {\n    if (err) {\n      return callback(err);\n    }\n\n    OIDS[uniqueKey] = {};\n    NAMES[uniqueKey] = {};\n\n    for (let row of rows) {\n      OIDS[uniqueKey][row.name] = +row.oid;\n      NAMES[uniqueKey][+row.oid] = row.name;\n    }\n\n    callback(null, OIDS[uniqueKey]);\n  });\n}\n\nfetch.fetcher = function (pg, connection) {\n  return (sql, callback) => {\n    pg.connect(connection, (err, client, done) => {\n      if (err) {\n        return callback(err);\n      }\n\n      client.query(sql, null, (err, result) => {\n        done();\n\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, result.rows);\n      });\n    });\n  };\n};\n\nfetch.names = NAMES;\nfetch.oids = OIDS;\n\nfetch.allowNull = function (parser) {\n  return function (value) {\n    if (value == null) {\n      return null;\n    }\n    return parser(value);\n  };\n};\n\nfetch.getTypeName = function (oid, key) {\n  return NAMES[key][+oid];\n};\n\nfetch.getTypeOID = function (name, key) {\n  return OIDS[key][name];\n};\n\nfetch.parseArray = function (parser) {\n  return fetch.allowNull((value) => array.parse(value, fetch.allowNull(parser)));\n};\n"]}