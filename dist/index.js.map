{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;kBAMwB,KAAK;;;;;;;;;;;;AAH7B,IAAM,IAAI,GAAG,EAAE,CAAC;AAChB,IAAM,KAAK,GAAG,EAAE,CAAC;;AAEF,SAAS,KAAK,CAAC,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE;AAClE,MAAI,IAAI,CAAC,GAAG,CAAC,EAAE;AACb,WAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;GAClC;;AAED,MAAI,GAAG,GAAG,gEAAgE,CAAC;AAC3E,KAAG,GAAG,wBAAS,GAAG,EAAE,KAAK,CAAC,CAAC;;AAE3B,IAAE,CAAC,OAAO,CAAC,UAAU,EAAE,UAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAK;AAC5C,QAAI,GAAG,EAAE;AACP,aAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;KACtB;;AAED,UAAM,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,MAAM,EAAK;AACvC,UAAI,EAAE,CAAC;;AAEP,UAAI,GAAG,EAAE;AACP,eAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;OACtB;;AAED,UAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AACf,WAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;;;;;;;AAEhB,6BAAgB,MAAM,CAAC,IAAI,8HAAE;cAApB,GAAG;;AACV,cAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AAC/B,eAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC;SACjC;;;;;;;;;;;;;;;;AAED,cAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;KAC3B,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ;;AAED,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;AACpB,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;;AAElB,KAAK,CAAC,SAAS,GAAG,UAAU,MAAM,EAAE;AAClC,SAAO,UAAU,KAAK,EAAE;AACtB,QAAI,KAAK,IAAI,IAAI,EAAE;AACjB,aAAO,IAAI,CAAC;KACb;AACD,WAAO,MAAM,CAAC,KAAK,CAAC,CAAC;GACtB,CAAC;CACH,CAAC;;AAEF,KAAK,CAAC,UAAU,GAAG,UAAU,MAAM,EAAE;AACnC,SAAO,KAAK,CAAC,SAAS,CAAC,UAAC,KAAK;WAAK,wBAAM,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;GAAA,CAAC,CAAC;CAChF,CAAC","file":"index.js","sourcesContent":["import pgformat from 'pg-format';\nimport array from 'postgres-array';\n\nconst OIDS = {};\nconst NAMES = {};\n\nexport default function fetch(pg, connection, set, types, callback) {\n  if (OIDS[set]) {\n    return callback(null, OIDS[set]);\n  }\n\n  let sql = 'SELECT oid, typname AS name FROM pg_type WHERE typname IN (%L)';\n  sql = pgformat(sql, types);\n\n  pg.connect(connection, (err, client, done) => {\n    if (err) {\n      return callback(err);\n    }\n\n    client.query(sql, null, (err, result) => {\n      done();\n\n      if (err) {\n        return callback(err);\n      }\n\n      OIDS[set] = {};\n      NAMES[set] = {};\n\n      for (let row of result.rows) {\n        OIDS[set][row.name] = +row.oid;\n        NAMES[set][+row.oid] = row.name;\n      }\n\n      callback(null, OIDS[set]);\n    });\n  });\n}\n\nfetch.names = NAMES;\nfetch.oids = OIDS;\n\nfetch.allowNull = function (parser) {\n  return function (value) {\n    if (value == null) {\n      return null;\n    }\n    return parser(value);\n  };\n};\n\nfetch.parseArray = function (parser) {\n  return fetch.allowNull((value) => array.parse(value, fetch.allowNull(parser)));\n};\n"]}